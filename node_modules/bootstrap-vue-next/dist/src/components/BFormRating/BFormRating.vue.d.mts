import { BFormRatingProps } from '../../types/ComponentProps';
type __VLS_Props = Omit<BFormRatingProps, 'modelValue'>;
type __VLS_PublicProps = {
    modelValue?: Exclude<BFormRatingProps['modelValue'], undefined>;
} & __VLS_Props;
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: Readonly<{
        default?: (props: {
            starIndex: number;
            isFilled: boolean;
            isHalf: boolean;
        }) => any;
    }> & {
        default?: (props: {
            starIndex: number;
            isFilled: boolean;
            isHalf: boolean;
        }) => any;
    };
    refs: {};
    rootEl: HTMLDivElement;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {
    hoverValue: import('vue').Ref<number | null, number | null>;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:modelValue": (value: number) => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    "onUpdate:modelValue"?: ((value: number) => any) | undefined;
}>, {
    id: string;
    readonly: boolean;
    size: "sm" | "lg" | string;
    color: string;
    variant: "primary" | "secondary" | "success" | "danger" | "warning" | "info" | "light" | "dark" | string;
    precision: number;
    showValue: boolean;
    inline: boolean;
    noBorder: boolean;
    showClear: boolean;
    showValueMax: boolean;
    stars: number;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, HTMLDivElement>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
