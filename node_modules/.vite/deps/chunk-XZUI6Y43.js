import {
  computed,
  getCurrentInstance,
  inject,
  provide,
  ref,
  shallowRef,
  watchEffect
} from "./chunk-FIAHBV72.js";

// node_modules/bootstrap-vue-next/dist/keys-CwytVEYF.mjs
var genericBvnPrefix = "BootstrapVueNext__";
var withBvnPrefix = (value, suffix = "") => {
  const suffixWithTrail = `${suffix}___`;
  return `${genericBvnPrefix}ID__${value}__${suffix ? suffixWithTrail : ""}`;
};
var createBvnInjectionKey = (name) => withBvnPrefix(name);
var createBvnPluginInjectionKey = (name) => withBvnPrefix(`${name}__plugin`);
var carouselInjectionKey = createBvnInjectionKey("carousel");
var tabsInjectionKey = createBvnInjectionKey("tabs");
var progressInjectionKey = createBvnInjectionKey("progress");
var listGroupInjectionKey = createBvnInjectionKey("listGroup");
var avatarGroupInjectionKey = createBvnInjectionKey("avatarGroup");
var accordionInjectionKey = createBvnInjectionKey("accordion");
var checkboxGroupKey = createBvnInjectionKey("checkboxGroup");
var radioGroupKey = createBvnInjectionKey("radioGroup");
var collapseInjectionKey = createBvnInjectionKey("collapse");
var globalShowHideStorageInjectionKey = createBvnPluginInjectionKey("globalShowHideStorage");
var dropdownInjectionKey = createBvnInjectionKey("dropdown");
var navbarInjectionKey = createBvnInjectionKey("navbar");
var rtlPluginKey = createBvnPluginInjectionKey("rtl");
var breadcrumbGlobalIndexKey = `${genericBvnPrefix}global_breadcrumb`;
var breadcrumbPluginKey = createBvnPluginInjectionKey("breadcrumbPlugin");
var modalManagerPluginKey = createBvnPluginInjectionKey("modalManager");
var defaultsKey = createBvnPluginInjectionKey("defaults");
var inputGroupKey = createBvnInjectionKey("inputGroup");
var buttonGroupKey = createBvnInjectionKey("buttonGroup");
var toastPluginKey = createBvnPluginInjectionKey("toast");
var modalControllerPluginKey = createBvnPluginInjectionKey("modalController");
var popoverPluginKey = createBvnPluginInjectionKey("popover");
var formGroupPluginKey = createBvnInjectionKey("formGroupPlugin");

// node_modules/bootstrap-vue-next/dist/useDefaults-2hK8an5B.mjs
function injectSelf(key, vm = getCurrentInstance2("injectSelf")) {
  const { provides } = vm;
  if (provides && key in provides) {
    return provides[key];
  }
  return void 0;
}
function getCurrentInstance2(name, message) {
  const vm = getCurrentInstance();
  if (!vm) {
    throw new Error(`[Bvn] ${name} ${"must be called from inside a setup function"}`);
  }
  return vm;
}
var toKebabCase = (str = "") => str.replace(/[^a-z]/gi, "-").replace(/\B([A-Z])/g, "-$1").toLowerCase();
var isObject = (obj) => obj !== null && typeof obj === "object" && !Array.isArray(obj);
function mergeDeep(source = {}, target = {}, arrayFn) {
  const out = {};
  for (const key in source) {
    out[key] = source[key];
  }
  for (const key in target) {
    const sourceProperty = source[key];
    const targetProperty = target[key];
    if (isObject(sourceProperty) && isObject(targetProperty)) {
      out[key] = mergeDeep(sourceProperty, targetProperty);
      continue;
    }
    out[key] = targetProperty;
  }
  return out;
}
var propIsDefined = (vnode, prop) => {
  var _a, _b;
  return typeof ((_a = vnode.props) == null ? void 0 : _a[prop]) !== "undefined" || typeof ((_b = vnode.props) == null ? void 0 : _b[toKebabCase(prop)]) !== "undefined";
};
function internalUseDefaults(props = {}, name) {
  const defaults = inject(defaultsKey, ref({}));
  const vm = getCurrentInstance2("useDefaults");
  name = name ?? vm.type.name ?? vm.type.__name;
  if (!name) {
    throw new Error("[Bvn] Could not determine component name");
  }
  const componentDefaults = computed(() => {
    var _a;
    return (_a = defaults.value) == null ? void 0 : _a[props._as ?? name];
  });
  const _props = new Proxy(props, {
    get(target, prop) {
      var _a, _b, _c, _d;
      const propValue = Reflect.get(target, prop);
      if (prop === "class" || prop === "style") {
        return [(_a = componentDefaults.value) == null ? void 0 : _a[prop], propValue].filter((v) => v != null);
      } else if (typeof prop === "string" && !propIsDefined(vm.vnode, prop)) {
        return ((_b = componentDefaults.value) == null ? void 0 : _b[prop]) ?? ((_d = (_c = defaults.value) == null ? void 0 : _c.global) == null ? void 0 : _d[prop]) ?? propValue;
      }
      return propValue;
    }
  });
  const _subcomponentDefaults = shallowRef();
  watchEffect(() => {
    if (componentDefaults.value) {
      const subComponents = Object.entries(componentDefaults.value).filter(
        ([key]) => key.startsWith(key[0].toUpperCase())
      );
      _subcomponentDefaults.value = subComponents.length ? Object.fromEntries(subComponents) : void 0;
    } else {
      _subcomponentDefaults.value = void 0;
    }
  });
  function provideSubDefaults() {
    const injected = injectSelf(defaultsKey, vm);
    provide(
      defaultsKey,
      computed(
        () => _subcomponentDefaults.value ? mergeDeep((injected == null ? void 0 : injected.value) ?? {}, _subcomponentDefaults.value) : injected == null ? void 0 : injected.value
      )
    );
  }
  return { props: _props, provideSubDefaults };
}
function useDefaults(props, name) {
  const { props: _props, provideSubDefaults } = internalUseDefaults(props, name);
  provideSubDefaults();
  return _props;
}

export {
  withBvnPrefix,
  carouselInjectionKey,
  tabsInjectionKey,
  progressInjectionKey,
  listGroupInjectionKey,
  avatarGroupInjectionKey,
  accordionInjectionKey,
  checkboxGroupKey,
  radioGroupKey,
  collapseInjectionKey,
  globalShowHideStorageInjectionKey,
  dropdownInjectionKey,
  navbarInjectionKey,
  rtlPluginKey,
  breadcrumbGlobalIndexKey,
  breadcrumbPluginKey,
  modalManagerPluginKey,
  defaultsKey,
  inputGroupKey,
  buttonGroupKey,
  toastPluginKey,
  modalControllerPluginKey,
  popoverPluginKey,
  formGroupPluginKey,
  useDefaults
};
//# sourceMappingURL=chunk-XZUI6Y43.js.map
