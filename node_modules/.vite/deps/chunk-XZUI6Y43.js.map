{
  "version": 3,
  "sources": ["../../bootstrap-vue-next/src/utils/keys.ts", "../../bootstrap-vue-next/src/composables/useDefaults.ts"],
  "sourcesContent": ["import type {ComponentInternalInstance, ComputedRef, InjectionKey, Ref, ShallowRef} from 'vue'\nimport type {TabType} from '../types/Tab'\nimport type {ClassValue} from '../types/AnyValuedAttributes'\nimport type {Numberish, ValidationState} from '../types/CommonTypes'\nimport type {LiteralUnion} from '../types/LiteralUnion'\nimport type {Size} from '../types/Size'\nimport type {RadiusElement} from '../types/RadiusElement'\nimport type {\n  BgColorVariant,\n  ButtonVariant,\n  ColorVariant,\n  TextColorVariant,\n} from '../types/ColorTypes'\nimport type {CheckboxValue} from '../types/CheckboxTypes'\nimport type {RadioValue} from '../types/RadioTypes'\nimport type {BreadcrumbItemRaw} from '../types/BreadcrumbTypes'\nimport type {\n  ControllerKey,\n  ModalOrchestratorCreateOptions,\n  ModalOrchestratorCreateParam,\n  ModalOrchestratorMapValue,\n  PopoverOrchestratorCreateParam,\n  PopoverOrchestratorMapValue,\n  PromiseWithModal,\n  PromiseWithModalBoolean,\n  PromiseWithPopover,\n  PromiseWithToast,\n  ToastOrchestratorArrayValue,\n  ToastOrchestratorCreateOptions,\n  ToastOrchestratorCreateParam,\n  TooltipOrchestratorCreateParam,\n} from '../types/ComponentOrchestratorTypes'\nimport type {BvnComponentProps} from '../types/BootstrapVueOptions'\n\nexport const genericBvnPrefix = 'BootstrapVueNext__'\n\nexport const withBvnPrefix = (value: string, suffix: string = '') => {\n  const suffixWithTrail = `${suffix}___`\n  return `${genericBvnPrefix}ID__${value}__${suffix ? suffixWithTrail : ''}`\n}\n\nconst createBvnInjectionKey = (name: string) => withBvnPrefix(name) as unknown as symbol // Type cast to symbol, these should be static\nconst createBvnPluginInjectionKey = (name: string) =>\n  withBvnPrefix(`${name}__plugin`) as unknown as symbol\n\n// BCarousel\nexport const carouselInjectionKey: InjectionKey<{\n  background: Readonly<Ref<string | undefined>>\n  width: Readonly<Ref<string | undefined>>\n  height: Readonly<Ref<string | undefined>>\n}> = createBvnInjectionKey('carousel')\n\n// BTabs\nexport const tabsInjectionKey: InjectionKey<{\n  lazy: Readonly<Ref<boolean>>\n  card: Readonly<Ref<boolean>>\n  noFade: Readonly<Ref<boolean>>\n  registerTab: (tab: ComputedRef<TabType>) => string\n  unregisterTab: (id: string) => void\n  activateTab: (id: string | undefined) => void\n  activeTabClass: Readonly<Ref<ClassValue>>\n  inactiveTabClass: Readonly<Ref<ClassValue>>\n  tabClass: Readonly<Ref<ClassValue>>\n  activeId: Readonly<Ref<string | undefined>>\n}> = createBvnInjectionKey('tabs')\n\n// BProgress\nexport const progressInjectionKey: InjectionKey<{\n  animated: Readonly<Ref<boolean | undefined>>\n  max: Readonly<Ref<Numberish>>\n  showProgress: Readonly<Ref<boolean | undefined>>\n  showValue: Readonly<Ref<boolean | undefined>>\n  striped: Readonly<Ref<boolean | undefined>>\n}> = createBvnInjectionKey('progress')\n\n// BListGroup\nexport const listGroupInjectionKey: InjectionKey<{\n  numbered: Readonly<Ref<boolean>>\n}> = createBvnInjectionKey('listGroup')\n\n// BAvatarGroup\nexport const avatarGroupInjectionKey: InjectionKey<{\n  overlapScale: Readonly<Ref<number>>\n  size: Readonly<Ref<LiteralUnion<Size, Numberish> | undefined>>\n  square: Readonly<Ref<boolean>>\n  rounded: Readonly<Ref<RadiusElement | boolean>>\n  roundedTop: Readonly<Ref<RadiusElement | boolean | undefined>>\n  roundedBottom: Readonly<Ref<RadiusElement | boolean | undefined>>\n  roundedStart: Readonly<Ref<RadiusElement | boolean | undefined>>\n  roundedEnd: Readonly<Ref<RadiusElement | boolean | undefined>>\n  variant: Readonly<Ref<ColorVariant | null>>\n  bgVariant: Readonly<Ref<BgColorVariant | null>>\n  textVariant: Readonly<Ref<TextColorVariant | null>>\n}> = createBvnInjectionKey('avatarGroup')\n\n// BAccordion\nexport const accordionInjectionKey: InjectionKey<{\n  openItem: Readonly<Ref<string | string[] | undefined>>\n  free: Readonly<Ref<boolean>>\n  initialAnimation: Readonly<Ref<boolean>>\n  lazy: Readonly<Ref<boolean>>\n  unmountLazy: Readonly<Ref<boolean>>\n  setOpenItem: (id: string) => void\n  setCloseItem: (id: string) => void\n  registerAccordionItem: (id: string, el: Readonly<ShallowRef<HTMLElement | null>>) => void\n  unregisterAccordionItem: (id: string) => void\n}> = createBvnInjectionKey('accordion')\n\n// BFormCheckboxGroup\nexport const checkboxGroupKey: InjectionKey<{\n  modelValue: Ref<readonly CheckboxValue[]>\n  switch: Readonly<Ref<boolean>>\n  buttonVariant: Readonly<Ref<ButtonVariant | null>>\n  form: Readonly<Ref<string | undefined>>\n  name: Readonly<Ref<string>>\n  state: Readonly<Ref<ValidationState | undefined>>\n  plain: Readonly<Ref<boolean>>\n  size: Readonly<Ref<Size>>\n  inline: Readonly<Ref<boolean>>\n  reverse: Readonly<Ref<boolean>>\n  required: Readonly<Ref<boolean>>\n  buttons: Readonly<Ref<boolean>>\n  disabled: Readonly<Ref<boolean>>\n}> = createBvnInjectionKey('checkboxGroup')\n\nexport const radioGroupKey: InjectionKey<{\n  modelValue: Ref<RadioValue>\n  buttonVariant: Readonly<Ref<ButtonVariant | null>>\n  form: Readonly<Ref<string | undefined>>\n  name: Readonly<Ref<string>>\n  buttons: Readonly<Ref<boolean>>\n  state: Readonly<Ref<ValidationState | undefined>>\n  plain: Readonly<Ref<boolean>>\n  size: Readonly<Ref<Size>>\n  inline: Readonly<Ref<boolean>>\n  reverse: Readonly<Ref<boolean>>\n  required: Readonly<Ref<boolean>>\n  disabled: Readonly<Ref<boolean>>\n}> = createBvnInjectionKey('radioGroup')\n\n// Collapse\nexport const collapseInjectionKey: InjectionKey<{\n  id?: Readonly<Ref<string>>\n  readonly hide?: () => void\n  readonly show?: () => void\n  readonly toggle?: () => void\n  visible?: Readonly<Ref<boolean>>\n  isNav?: Readonly<Ref<boolean>>\n}> = createBvnInjectionKey('collapse')\n\n// Show/Hide components\nexport type RegisterShowHideFnInput = {\n  id: string\n  component: ComponentInternalInstance\n  value: Ref<boolean>\n  toggle: (resolveOnHide?: boolean) => Promise<boolean | string>\n  show: (resolveOnHide?: boolean) => Promise<boolean | string>\n  hide: (trigger?: string) => Promise<boolean | string>\n  registerTrigger: (trigger: string, el: Element) => void\n  unregisterTrigger: (trigger: string, el: Element, clean: boolean) => void\n}\n\nexport interface RegisterShowHideMapValue {\n  id: string\n  component: ComponentInternalInstance\n  value: Readonly<Ref<boolean>>\n  toggle: (resolveOnHide?: boolean) => Promise<boolean | string | null>\n  show: (resolveOnHide?: boolean) => Promise<boolean | string | null>\n  hide: (trigger?: string, noTraverse?: boolean) => Promise<boolean | string | null>\n  registerTrigger: (trigger: string, el: Element) => void\n  unregisterTrigger: (trigger: string, el: Element, clean: boolean) => void\n}\nexport interface RegisterShowHideValue {\n  register: (input: RegisterShowHideFnInput) => {\n    unregister: () => void\n    updateId: (newId: string, oldId: string) => void\n  }\n  values: Ref<Map<string, RegisterShowHideMapValue>>\n}\nexport const globalShowHideStorageInjectionKey: InjectionKey<RegisterShowHideValue> =\n  createBvnPluginInjectionKey('globalShowHideStorage')\n\nexport const dropdownInjectionKey: InjectionKey<{\n  id?: Readonly<Ref<string>>\n  readonly hide?: () => void\n  readonly show?: () => void\n  readonly toggle?: () => void\n  visible?: Readonly<Ref<boolean>>\n  isNav?: Readonly<Ref<boolean>>\n}> = createBvnInjectionKey('dropdown')\n\nexport const navbarInjectionKey: InjectionKey<{\n  tag?: Readonly<Ref<string>>\n  autoClose?: Readonly<Ref<boolean>>\n}> = createBvnInjectionKey('navbar')\n\nexport const rtlPluginKey: InjectionKey<{\n  isRtl: Ref<boolean>\n  locale: Ref<string | undefined>\n}> = createBvnPluginInjectionKey('rtl')\n\nexport const breadcrumbGlobalIndexKey = `${genericBvnPrefix}global_breadcrumb`\nexport const breadcrumbPluginKey: InjectionKey<{\n  items: Ref<Record<string, BreadcrumbItemRaw[]>>\n  reset: (key?: string) => void\n}> = createBvnPluginInjectionKey('breadcrumbPlugin')\n\nexport const modalManagerPluginKey: InjectionKey<{\n  stack: ComputedRef<ComponentInternalInstance[]>\n  countStack: ComputedRef<number>\n  lastStack: ComputedRef<ComponentInternalInstance | undefined>\n  pushStack: (modal: Readonly<ComponentInternalInstance>) => void\n  removeStack: (modal: Readonly<ComponentInternalInstance>) => void\n  registry: Readonly<Ref<Map<number, ComponentInternalInstance>>>\n  pushRegistry: (modal: Readonly<ComponentInternalInstance>) => void\n  removeRegistry: (modal: Readonly<ComponentInternalInstance>) => void\n}> = createBvnPluginInjectionKey('modalManager')\n\nexport const defaultsKey: InjectionKey<Ref<Partial<BvnComponentProps>>> =\n  createBvnPluginInjectionKey('defaults')\n\nexport const inputGroupKey: InjectionKey<boolean> = createBvnInjectionKey('inputGroup')\nexport const buttonGroupKey: InjectionKey<boolean> = createBvnInjectionKey('buttonGroup')\n\nexport const toastPluginKey: InjectionKey<{\n  toasts: Ref<ToastOrchestratorArrayValue[]>\n  _isAppend: Ref<boolean>\n  _isOrchestratorInstalled: Ref<boolean>\n  create: (\n    obj: ToastOrchestratorCreateParam,\n    options?: ToastOrchestratorCreateOptions\n  ) => PromiseWithToast\n  /**\n   * show\n   * @deprecated\n   */\n  show: (obj: ToastOrchestratorCreateParam) => PromiseWithToast\n}> = createBvnPluginInjectionKey('toast')\n\nexport const modalControllerPluginKey: InjectionKey<{\n  modals: Ref<Map<ControllerKey, ModalOrchestratorMapValue>>\n  _isOrchestratorInstalled: Ref<boolean>\n  create: (\n    obj: ModalOrchestratorCreateParam,\n    options?: ModalOrchestratorCreateOptions\n  ) => PromiseWithModal | PromiseWithModalBoolean\n  /**\n   * show\n   * @deprecated\n   */\n  show: (obj: ModalOrchestratorCreateParam) => PromiseWithModalBoolean\n  /**\n   * show\n   * @deprecated\n   */\n  confirm: (obj: ModalOrchestratorCreateParam) => PromiseWithModalBoolean\n}> = createBvnPluginInjectionKey('modalController')\n\nexport const popoverPluginKey: InjectionKey<{\n  popovers: Ref<Map<ControllerKey, PopoverOrchestratorMapValue>>\n  popover: (obj: PopoverOrchestratorCreateParam) => PromiseWithPopover\n  tooltip: (obj: TooltipOrchestratorCreateParam) => PromiseWithPopover\n  _isOrchestratorInstalled: Ref<boolean>\n}> = createBvnPluginInjectionKey('popover')\n\nexport const formGroupPluginKey: InjectionKey<\n  (id: Ref<string>) => {\n    state: Readonly<Ref<ValidationState | undefined>>\n  }\n> = createBvnInjectionKey('formGroupPlugin')\n", "/* eslint-disable eqeqeq */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n// Utilities\nimport {\n  getCurrentInstance as _getCurrentInstance,\n  type ComponentInternalInstance,\n  computed,\n  inject,\n  type InjectionKey,\n  provide,\n  ref,\n  shallowRef,\n  type VNode,\n  watchEffect,\n} from 'vue'\nimport {defaultsKey} from '../utils/keys'\nimport type {BvnComponentProps} from '../types/BootstrapVueOptions'\n\n// Code here was taken from\n// https://github.com/vuetifyjs/vuetify/blob/8ed87310890e2b6c8ad2a626a02c17f9467cbb60/packages/vuetify/src/composables/defaults.ts#L138\n// Thanks to the Vuetify team. Vue does not make this easy\n\nfunction injectSelf<T>(key: InjectionKey<T> | string, vm?: ComponentInternalInstance): T | undefined\nfunction injectSelf(key: InjectionKey<any> | string, vm = getCurrentInstance('injectSelf')) {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const {provides} = vm\n\n  if (provides && (key as string | symbol) in provides) {\n    // TS doesn't allow symbol as index type\n    return provides[key as string]\n  }\n  return undefined\n}\n\nfunction getCurrentInstance(name: string, message?: string) {\n  const vm = _getCurrentInstance()\n\n  if (!vm) {\n    throw new Error(`[Bvn] ${name} ${message || 'must be called from inside a setup function'}`)\n  }\n\n  return vm\n}\n\nconst toKebabCase = (str = '') =>\n  str\n    .replace(/[^a-z]/gi, '-')\n    .replace(/\\B([A-Z])/g, '-$1')\n    .toLowerCase()\nconst isObject = (obj: any): obj is Record<string, any> =>\n  obj !== null && typeof obj === 'object' && !Array.isArray(obj)\n\nfunction mergeDeep(\n  source: Record<string, any> = {},\n  target: Record<string, any> = {},\n  arrayFn?: (a: unknown[], b: unknown[]) => unknown[]\n) {\n  const out: Record<string, any> = {}\n\n  for (const key in source) {\n    out[key] = source[key]\n  }\n\n  for (const key in target) {\n    const sourceProperty = source[key]\n    const targetProperty = target[key]\n\n    // Only continue deep merging if\n    // both properties are objects\n    if (isObject(sourceProperty) && isObject(targetProperty)) {\n      out[key] = mergeDeep(sourceProperty, targetProperty, arrayFn)\n\n      continue\n    }\n\n    if (Array.isArray(sourceProperty) && Array.isArray(targetProperty) && arrayFn) {\n      out[key] = arrayFn(sourceProperty, targetProperty)\n\n      continue\n    }\n\n    out[key] = targetProperty\n  }\n\n  return out\n}\n\nconst propIsDefined = (vnode: VNode, prop: string) =>\n  typeof vnode.props?.[prop] !== 'undefined' ||\n  typeof vnode.props?.[toKebabCase(prop)] !== 'undefined'\n\nfunction internalUseDefaults(props: Record<string, any> = {}, name?: string) {\n  const defaults = inject(defaultsKey, ref({}))\n  const vm = getCurrentInstance('useDefaults')\n\n  name = name ?? vm.type.name ?? vm.type.__name\n  if (!name) {\n    // Should never happen\n    throw new Error('[Bvn] Could not determine component name')\n  }\n\n  const componentDefaults = computed(() => (defaults.value as any)?.[props._as ?? name])\n  const _props = new Proxy(props, {\n    get(target, prop) {\n      const propValue = Reflect.get(target, prop)\n      if (prop === 'class' || prop === 'style') {\n        return [componentDefaults.value?.[prop], propValue].filter((v) => v != null)\n      } else if (typeof prop === 'string' && !propIsDefined(vm.vnode, prop)) {\n        return (\n          componentDefaults.value?.[prop] ?? (defaults.value as any)?.global?.[prop] ?? propValue\n        )\n      }\n      return propValue\n    },\n  })\n\n  const _subcomponentDefaults = shallowRef()\n  watchEffect(() => {\n    if (componentDefaults.value) {\n      const subComponents = Object.entries(componentDefaults.value).filter(([key]) =>\n        key.startsWith(key[0].toUpperCase())\n      )\n      _subcomponentDefaults.value = subComponents.length\n        ? Object.fromEntries(subComponents)\n        : undefined\n    } else {\n      _subcomponentDefaults.value = undefined\n    }\n  })\n\n  function provideSubDefaults() {\n    const injected = injectSelf(defaultsKey, vm)\n    provide(\n      defaultsKey,\n      computed(() =>\n        _subcomponentDefaults.value\n          ? mergeDeep(injected?.value ?? {}, _subcomponentDefaults.value)\n          : injected?.value\n      ) as any\n    )\n  }\n\n  return {props: _props, provideSubDefaults}\n}\n\nexport function useDefaults<T extends Record<string, any>>(\n  props: T,\n  name: keyof BvnComponentProps\n): T {\n  const {props: _props, provideSubDefaults} = internalUseDefaults(props, name)\n  provideSubDefaults()\n  return _props as T\n}\n"],
  "mappings": "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",
  "names": ["getCurrentInstance", "_getCurrentInstance"]
}
